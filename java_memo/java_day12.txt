day12

클래스

- 매개변수의 다형성
---------------------------------

1. 추상클래스
	키워드 abstract 추상화 하다!
	1) 클래스 만들 때 붙인다.
	2) 메서드를 만들 때 붙인다!

	-> 클래스 내부에 abstract가 붙은 메서드가 존재하면,
	   그 클래스는 반드시 abstract 클래스가 되어야만 한다.

    추상메서드
	vod fct(){

	}
	추상메서드는 body가 없다!
	void fct();  <--- 불완전한 메서드!! 때문에, 앞에 abstract를 붙어야 한다.
	abstract void fct(); => " 추상 메서드 "
				통상, 추상메서드는 public 으로 만드는 경우가 많다!
	abstract public void fct();	"불완전한 메서드"!!

	abstract class Type{  <----- 추상 메서드를 갖고 있는 클래스 이기 때문에
		인스턴스 변수;		추상클래스로 만들어야 한다!
		생성자();
		메서드();
		abstract public void fct();

	}

	추상 클래스는 "불완전한 메서드"로 인해, 인스턴스를 만들 수 없다!
		new Type(); 에러!
   
	추상 클래스를 사용해야 하는 목적!
	- 다른 클래스를 하나로 묶을 수 있다!
	  (실제 추상클래스를 사용하는 게 아니라, 다른 클래스의 보조적인 역할을 수행한다)
	- 다형적 대입의 부모 클래스로 활용할 수 있다
	
	
	하위 클래스에서 반드시 재정의를 해야될 메서드를 추상화 시켜놓자!
		
   
 - 인터페이스 : (자바에만 등장한다)

class TypeA{	class대신에 interface 키워드로 만들자! interface TypeA{
						TypeA는 인터페이스라고 부르자!
}

  1. 인터페이스 특징 (인터페이스도 타입이다)
      오로지 추상메서드만 쓸 수 있다!
      변수 안됨, 일반 메서드 안됨, 생성자 안됨
      오로지 메서드를 위해서만 존재하는 타입!

      interface TypeA{
		(public final static) double PI = 3.14;	
					//final : const 상수화 시키다, 고정하다!
		void printScore();  //abstract를 생략해도 된다.
		void deleteScore(); //interface내에서는 생략해도 된다
		void inputScore();
		void updateScore(){}   <---- body가 있네? 그럼 엥러!
	}


	TypeA.PI  실제 사용할 때, 인터페이스.상수로 사용한다.
				static : 실행전 메모리에 띄우기
				public : 프로젝트내 아무데서나 사용하기
				final : 상수로 고정화 시키기!

	※ final
		final class A{} 	: A클래스를 상속시키지 말 것!
		final void fct(){}	: fct() 메서드를 재정의 시키지 말것
		final int num = 10;	: num은 10을 상수화 시켜놓고 사용할 것
					  값 변경 금지!!!


